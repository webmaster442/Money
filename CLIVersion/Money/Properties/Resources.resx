<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="BachCategoryText" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\BachCategoryText.txt;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;utf-8</value>
  </data>
  <data name="BachSpendingsText" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\BachSpendingsText.txt;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;utf-8</value>
  </data>
  <data name="CmdAddDescription" xml:space="preserve">
    <value>Add a spending to the database</value>
  </data>
  <data name="CmdCategoryAddDescription" xml:space="preserve">
    <value>Add a spending category</value>
  </data>
  <data name="CmdCategoryDescription" xml:space="preserve">
    <value>Category management commands</value>
  </data>
  <data name="CmdCategoryListDescription" xml:space="preserve">
    <value>List all spending categories</value>
  </data>
  <data name="CmdCategoryRenameDescription" xml:space="preserve">
    <value>Rename a category</value>
  </data>
  <data name="CmdExportBackupDescription" xml:space="preserve">
    <value>Export data to backup format</value>
  </data>
  <data name="CmdExportDescription" xml:space="preserve">
    <value>Export related commands</value>
  </data>
  <data name="CmdExportExcelDescription" xml:space="preserve">
    <value>Export data to excel xlsx file</value>
  </data>
  <data name="CmdExportReportDescription" xml:space="preserve">
    <value>Export a report to an html file</value>
  </data>
  <data name="CmdFindDescription" xml:space="preserve">
    <value>Search spendings in the database</value>
  </data>
  <data name="CmdImportBackupDescription" xml:space="preserve">
    <value>Import data to money backup format</value>
  </data>
  <data name="CmdImportDescription" xml:space="preserve">
    <value>Import related commands</value>
  </data>
  <data name="CmdImportExcelDescription" xml:space="preserve">
    <value>Import data from excel xlsx file</value>
  </data>
  <data name="CmdImportTemplateDescription" xml:space="preserve">
    <value>Create excel template for importing</value>
  </data>
  <data name="CmdSettingsDescription" xml:space="preserve">
    <value>Open program settings in editor...</value>
  </data>
  <data name="CmdStatDescription" xml:space="preserve">
    <value>Display statistics about spendings</value>
  </data>
  <data name="CmdSyncDescription" xml:space="preserve">
    <value>Sync database with git commands</value>
  </data>
  <data name="CmdSyncPullDescription" xml:space="preserve">
    <value>Pull syncronized changes from the specified git repository</value>
  </data>
  <data name="CmdSyncPushDescription" xml:space="preserve">
    <value>Push unsyncronized changes to the specified git repository</value>
  </data>
  <data name="ErrorAddNegativeAmmount" xml:space="preserve">
    <value>Amount must be positive and greater than 0</value>
  </data>
  <data name="ErrorCantConvertDateOnly" xml:space="preserve">
    <value>Can't convert value to DateOnly.</value>
  </data>
  <data name="ErrorCategoryAllreadyExists" xml:space="preserve">
    <value>Can't create category {0} It allredy exists</value>
  </data>
  <data name="ErrorCategoryDoesntExist" xml:space="preserve">
    <value>Category doesn't exist: {0}
Create it first with the category add command</value>
  </data>
  <data name="ErrorCategoryNameNull" xml:space="preserve">
    <value>Category name can't be null or empty</value>
  </data>
  <data name="ErrorDateValidate" xml:space="preserve">
    <value>end date must be bigger than start date</value>
  </data>
  <data name="ErrorEmptyFileName" xml:space="preserve">
    <value>file name can't be empty</value>
  </data>
  <data name="ErrorEmptyText" xml:space="preserve">
    <value>Text can't be empty</value>
  </data>
  <data name="ErrorFileMustExist" xml:space="preserve">
    <value>file name can't be empy and must be an existing file</value>
  </data>
  <data name="ErrorFolderDoesntExist" xml:space="preserve">
    <value>Error: specified git folder for sync doesn't exist.  Run the settings subcommand to check settings.</value>
  </data>
  <data name="ErrorFolderNotGitFolder" xml:space="preserve">
    <value>Error: specified git folder for sync isn't a git repository.  Run the settings subcommand to check settings.</value>
  </data>
  <data name="ErrorFolderNotSet" xml:space="preserve">
    <value>Error: git folder for sync is not set. Run the settings subcommand to set it.</value>
  </data>
  <data name="ErrorInvalidJson" xml:space="preserve">
    <value>Invalid data in json</value>
  </data>
  <data name="ErrorNoSearchTermGiven" xml:space="preserve">
    <value>No search term was given</value>
  </data>
  <data name="ErrorNotValidDate" xml:space="preserve">
    <value>is a not valid date.</value>
  </data>
  <data name="InsertSuccess" xml:space="preserve">
    <value>Successfully inserted with id:</value>
  </data>
  <data name="ReadmeRender" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\readme.render.txt;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;windows-1250</value>
  </data>
  <data name="StatAveragePerCount" xml:space="preserve">
    <value>Average / count</value>
  </data>
  <data name="StatAveragePerDay" xml:space="preserve">
    <value>Average / day</value>
  </data>
  <data name="StatCategory" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="StatCategoryAvailable" xml:space="preserve">
    <value>Available categories</value>
  </data>
  <data name="StatDate" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="StatDayly" xml:space="preserve">
    <value>Dayly breakdown</value>
  </data>
  <data name="StatFromToHeader" xml:space="preserve">
    <value>Spendings from {0} to {1}</value>
  </data>
  <data name="StatSpendingCount" xml:space="preserve">
    <value>Spending count</value>
  </data>
  <data name="StatSpendingWithDays" xml:space="preserve">
    <value>Spendings with days</value>
  </data>
  <data name="StatSpent" xml:space="preserve">
    <value>Spent money</value>
  </data>
  <data name="StatSumSpending" xml:space="preserve">
    <value>Sum spending</value>
  </data>
  <data name="StatTotalSpending" xml:space="preserve">
    <value>Total spending</value>
  </data>
  <data name="style" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\style.css;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;windows-1250</value>
  </data>
  <data name="SuccesImport" xml:space="preserve">
    <value>Imported {0} categories and {1} entries</value>
  </data>
  <data name="SuccessCategoryRename" xml:space="preserve">
    <value>Successfully renamed {0} to {1}</value>
  </data>
  <data name="SuccessCreatedImportTemplate" xml:space="preserve">
    <value>Successfully created import template {0}</value>
  </data>
  <data name="SuccessExport" xml:space="preserve">
    <value>Successfully written {0} entries to {1}</value>
  </data>
  <data name="SuccessReport" xml:space="preserve">
    <value>Report successfully written to {0}</value>
  </data>
  <data name="SuccessSettingsOpen" xml:space="preserve">
    <value>Opening settings in editor...</value>
  </data>
  <data name="WarnWillReplaceDbContents" xml:space="preserve">
    <value>Warning. Importing a backup will replace the database contents with the contents in the backup. Do you want to continue?</value>
  </data>
</root>